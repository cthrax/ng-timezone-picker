{"version":3,"file":"ng-timezone-picker.js","sources":["ng://ng-timezone-picker/lib/timezone-picker.service.ts","ng://ng-timezone-picker/lib/timezone-picker.component.ts","ng://ng-timezone-picker/lib/world-svg/world-svg.component.ts","ng://ng-timezone-picker/lib/hover-text/hover-text.component.ts","ng://ng-timezone-picker/lib/selection-box/selection-box.component.ts","ng://ng-timezone-picker/lib/timezone-picker.module.ts","ng://ng-timezone-picker/public-api.ts","ng://ng-timezone-picker/ng-timezone-picker.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\nimport timezones from './timezones.json';\nimport {Timezone} from './utils';\nimport moment from 'moment-timezone';\n\nfunction getMiddle(first, last) {\n  return Math.floor((last + first) / 2);\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimezonePickerService {\n  public timezones: Array<Timezone>;\n  constructor() {\n    // Copy it out so no one mucks with the original list\n    this.timezones = timezones.map((t) => Object.assign({}, t));\n    // Sort the list for each of searching\n    this.timezones.sort((left, right) => {\n      if (left.timezone < right.timezone) {\n        return 1;\n      } else if (left.timezone > right.timezone) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n  }\n\n  public getFullTimezoneList() {\n    return this.timezones;\n  }\n\n  getTimeZoneObject(value, attribute?): Timezone {\n    return this.findTimezone(attribute ? attribute : 'timezone', value);\n  }\n\n  getSystemTimezone(): Timezone {\n    return this.getTimeZoneObject(moment.tz.guess());\n  }\n\n  unselectCurrent() {\n    this.timezones.some((timezone) => {\n      if (timezone.selected === true) {\n        timezone.selected = false;\n        return true;\n      }\n      return false;\n    });\n  }\n\n  setTimezoneByKey(zonename: string) {\n    if (!zonename) {\n      return;\n    }\n    const timezone = this.findTimezone('timezone', zonename);\n    timezone.selected = true;\n    this.unselectCurrent();\n  }\n\n  findTimezone(key, value): Timezone {\n    let first = 0;\n    let last = this.timezones.length - 1;\n    let middle = getMiddle(first, last);\n\n    while (first <= last) {\n      if (value < this.timezones[middle][key]) {\n        last = middle - 1;\n        middle = getMiddle(first, last);\n      } else if (value > this.timezones[middle][key]) {\n        first = middle + 1;\n        middle = getMiddle(first, last);\n      } else {\n        return this.timezones[middle];\n      }\n    }\n\n    return null;\n  }\n}\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {findValue, generateElement, Timezone} from './utils';\nimport moment from 'moment-timezone';\nimport {TimezonePickerService} from './timezone-picker.service';\n\n@Component({\n  selector: 'cth-timezone-picker',\n  templateUrl: './timezone-picker.component.html',\n  styles: []\n})\nexport class TimezonePickerComponent implements OnInit {\n  public timezones;\n\n  @Input() public defaultTimezone: string = null;\n  @Input() public width = 500;\n  @Input() public height = 250;\n  @Input() public dayLightSaving: boolean = (typeof moment == \"function\");\n\n  @Output() public hoverTextChanged: EventEmitter<Timezone> = new EventEmitter<Timezone>();\n  @Output() public mapSelectionChanged: EventEmitter<Timezone> = new EventEmitter<Timezone>();\n\n  public get dimensions() {\n    return {\n      height: this.height,\n      width: this.width\n    };\n  }\n\n  constructor(private timezoneService: TimezonePickerService) {\n    this.timezones = this.timezoneService.getFullTimezoneList();\n    this.addMomentProperties();\n  }\n\n  ngOnInit() {\n    if (!this.defaultTimezone) {\n      const systemTimezone = this.timezoneService.getSystemTimezone();\n\n      if (!!systemTimezone) {\n        this.defaultTimezone = systemTimezone.zonename;\n      }\n    }\n\n    this.timezoneService.setTimezoneByKey(this.defaultTimezone);\n  }\n\n  addMomentProperties() {\n    this.timezones.forEach((zoneObj) => {\n\n      if (moment) {\n        const momentObj = moment().tz(zoneObj.timezone);\n        zoneObj.zonename = momentObj.zoneName();\n        zoneObj.timezone = momentObj._z.name\n      }\n    })\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Timezone} from '../utils';\nimport {TimezonePickerService} from '../timezone-picker.service';\n\n@Component({\n  selector: 'cth-world-svg',\n  templateUrl: './world-svg.component.html',\n  styleUrls: ['./world-svg.component.less']\n})\nexport class WorldSvgComponent implements OnInit {\n\n  public timezones: Array<Timezone>;\n  @Input() public width: number;\n  @Input() public height: number;\n\n  public get viewBox() {\n    return `0 0 ${this.width || 0} ${this.height || 0}`;\n  }\n\n  constructor(private timezoneService: TimezonePickerService) {\n    this.timezones = this.timezoneService.getFullTimezoneList();\n  }\n\n  ngOnInit() {\n  }\n\n  areaSelected(timezone) {\n    this.timezones.some((timezone) => {\n      if (timezone.selected === true) {\n        timezone.selected = false;\n        return true;\n      }\n      return false;\n    });\n\n    timezone.selected = true;\n  }\n\n  mouseEnter(selected) {\n    this.timezones.forEach((timezone) => {\n      timezone.sameOffset = timezone.offset === selected.offset;\n    });\n    /* Only if hover text turned on */\n    /*\n      var el = null,\n        data = $(e.target).data(),\n        hoverKey = options.mapHoverType,\n        hoverText = options.hoverText;\n      if (hoverKey) {\n        el = $('.timezone-map polygon[data-' + hoverKey + '=\"' + data[hoverKey] + '\"]');\n      } else {\n        el = $(e.currentTarget);\n      }\n      this.$el.find('.hover-text p').addClass('active').text(hoverText && hoverText instanceof Function ? hoverText(e, data) : (data.timezone + \" (\" + data.zonename + \")\"));\n     */\n  }\n\n  mouseLeave(selected) {\n    this.timezones.forEach((timezone) => {\n      timezone.sameOffset = timezone.offset !== selected.offset;\n    });\n    /*\n      this.$el.find('.hover-text p').removeClass('active').text('');\n     */\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-hover-text',\n  templateUrl: './hover-text.component.html',\n  styleUrls: ['./hover-text.component.css']\n})\nexport class HoverTextComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-selection-box',\n  templateUrl: './selection-box.component.html',\n  styleUrls: ['./selection-box.component.css']\n})\nexport class SelectionBoxComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {TimezonePickerComponent} from './timezone-picker.component';\nimport {WorldSvgComponent} from './world-svg/world-svg.component';\nimport {HoverTextComponent} from './hover-text/hover-text.component';\nimport {CommonModule} from '@angular/common';\nimport {SelectionBoxComponent} from './selection-box/selection-box.component';\n\n\n@NgModule({\n  declarations: [TimezonePickerComponent, WorldSvgComponent, HoverTextComponent, SelectionBoxComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [TimezonePickerComponent]\n})\nexport class TimezonePickerModule { }\n","/*\n * Public API Surface of timezone-picker\n */\n\nexport * from './lib/timezone-picker.service';\nexport * from './lib/timezone-picker.component';\nexport * from './lib/timezone-picker.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {HoverTextComponent as ɵb} from './lib/hover-text/hover-text.component';\nexport {SelectionBoxComponent as ɵc} from './lib/selection-box/selection-box.component';\nexport {WorldSvgComponent as ɵa} from './lib/world-svg/world-svg.component';"],"names":["tslib_1.__decorate"],"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"}